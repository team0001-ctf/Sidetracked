#!/bin/bash

# make sure everything is running from the right directory
# this way we can use relative paths
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
cd $DIR


# make sure its being run by root
id | grep "uid=0" > /dev/null
if [ "$?" != 0 ]
then
    echo "Please make sure you are running sidetracked as root!"
    exit
fi


# make suer docker is installed
docker --version > /dev/null
if [ "$?" != 0 ]
then
    echo "Please make sure you have docker installed!"
    exit
fi




# function gets the id of the running teahaz instance
ID=""
function get_dID {
    running=$( docker ps)

    ID=$(echo $running | grep  -o ".............sidetracked")

    ID=$(echo $ID | grep  -o "^............")

    if [ "$ID" == "" ]
    then
        ID=""
    fi

}



# kill container on ./run kill
if [ "$1" == "kill" ]
then

    get_dID

    if [ "$ID" == "" ]
    then
        echo "no container running"

    else
        docker kill $ID

    fi



# get shell in container on ./run shell
elif [ "$1" == "shell" ]
then

    get_dID

    if [ "$ID" == "" ]
    then
        echo "no container running"

    else
        docker exec -it $ID /bin/bash

    fi




# rebuild container on ./run rebuild
elif [ "$1" == "rebuild" ]
then

    cd $DIR/docker

    docker build --no-cache -t sidetracked:latest .




# just run the container normally on ./run
else
    get_dID

    # if the server is not running, run it
    if [ "$ID" == "" ]
    then

        cd $DIR/docker

        docker build -t sidetracked:latest .

        run_root_scripts &

        docker run  -p 5000:5000 -e PYTHONUNBUFFERED=0  --rm -v $DIR:/home/teahaz sidetracked:latest

    else
        echo "server is already running"
    fi

fi
